'''
Project Euler Problem 12:

The sequence of triangle numbers is generated by adding the natural
numbers. So the 7th triangle number would be
1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
'''

##def find_factors(n):
##    divs = []
##    num_divs = 0
##    for i in range(1, int(n/2)+1):
##        if n % i == 0:
##            #divs.append(i)
##            num_divs += 1
##    #divs.append(n)
##    num_divs += 1
##    return(num_divs, divs)

def find_triang_factors(m):
    num_divs = 1
    n = 1
    while True:
        num = int((n*(n+1)/2))
        #num_divs = find_factors(num)[0]
        #num_divs = divisor_function(num)
        num_divs = num_divs_using_util(num)
        if num_divs >= m:
            return num
        n += 1

##def rwh_primes(n):
##    # http://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
##    """ Returns  a list of primes < n """
##    sieve = [True] * n
##    for i in range(3,int(n**0.5)+1,2):
##        if sieve[i]:
##            sieve[i*i::2*i]=[False]*int(((n-i*i-1)/(2*i)+1))
##    return [2] + [i for i in range(3,n,2) if sieve[i]]
##
##def divisor_function(n):
##    primes = rwh_primes(n)
##    powers = [0 for i in range(len(primes))]
##    i = 0
##    while i < len(primes):
##        if n % primes[i] == 0:
##            powers[i] += 1
##            n = int(n/primes[i])
##        else:
##            i += 1
##    num_divs = 1
##    for power in powers:
##        if power > 0:
##            num_divs *= (power + 1)
##    return num_divs
##
##def count_divs(n):
##    pass

import Utilities

def num_divs_using_util(n):
    factors = Utilities.factorization(n)
    num_divs = 1
    for key in factors:
        num_divs *= (factors[key] + 1)
    return num_divs

print("Problem 12 solution: " + str(find_triang_factors(500)))
