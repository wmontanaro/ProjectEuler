'''
Project Euler Problem 44:

Pentagonal numbers are generated by the formula, Pn=n(3n−1)/2. The first
ten pentagonal numbers are:

1, 5, 12, 22, 35, 51, 70, 92, 117, 145, ...

It can be seen that P4 + P7 = 22 + 70 = 92 = P8. However, their difference,
70 − 22 = 48, is not pentagonal.

Find the pair of pentagonal numbers, Pj and Pk, for which their sum and
difference are pentagonal and D = |Pk − Pj| is minimised; what is the value
of D?
'''

def get_pentag(n):
    #return the nth pentagonal number
    Pn = int(n*((3*n) - 1) / 2)
    return Pn

def is_pentag(n):
    counter = 1
    result = get_pentag(counter)
    while result < n:
        result = get_pentag(counter)
        if result == n:
            #print(str(counter))
            return True
        counter += 1
    return False

##def main():
##    penset = set()
##    n = 1
##    #while True:
##    while n<10:
##        print("n=" + str(n))
##        newpen = get_pentag(n)
##        print("newpen=" + str(newpen))
##        for oldpen in penset:
##            if newpen - oldpen in penset:
##                print("diff in penset " + str(oldpen))
##                testsum = newpen + oldpen
##                m = n
##                pm = get_pentag(m)
##                while pm < testsum:
##                    m += 1
##                    pm = get_pentag(m)
##                    if pm == testsum:
##                        print("winner! " + str(newpen) + ", " + str(oldpen))
##                        return
##        penset.add(newpen)
##        n += 1
    
##def main():
##    pents = set()
##    pensums = dict()
##    n = 1
##    while True:
##        newpen = get_pentag(n)
##        if newpen in pensums: #if newpen = 2Pk + Pi for some i, j
##            for item in pensums[newpen]:
##                #if newpen - item[0] in pents: #if newpen = Pk+Pi
##                if newpen - item[0] == item[1]:
##                    #print("winnar! " + str(newpen-item) + ", " + str(item))
##                    return(str(newpen-item[0]), str(item))
##        for item in pents:
##            newdiff = newpen - item
##            if newdiff in pents:
##                newsum = newpen + item
##                if newsum in pensums:
##                    pensums[newsum].append([item, newpen])
##                else:
##                    pensums[newsum] = [item, newpen]
##        pents.add(newpen)
##        n += 1

def main():
    pents = set() #pentagonal numbers
    pensums = dict() #numbers of the form Pi + Pj, where Pi - Pj is pentagonal
    n = 1
    while True:
        Pn = get_pentag(n)
        if Pn in pensums:
            return(pensums[Pn][0] - pensums[Pn][1])
            #return(Pn, pensums[Pn][0], pensums[Pn][1])
        for Pi in pents:
            testdiff = Pn - Pi
            if testdiff in pents:
                pensums[Pn+Pi] = [Pn, Pi]
        pents.add(Pn)
        n += 1

def prove_correct():
    #takes multiple minutes to run; look at all possible combinations until
    #the difference in successive terms is larger than the difference found
    #by main()
    diff = main()
    pents = set((1, 5))
    n = 3
    curdiff = 4
    prev = 5
    while curdiff < diff:
        Pn = get_pentag(n)
        curdiff = Pn - prev
        pents.add(Pn)
        prev = Pn
        n += 1
    penlist = list(pents)
    winners = []
    l = len(penlist)
    for i in range(l-1, 0, -1):
##        if i % 10000 == 0:
##            print(str(i))
        for j in range(i-1, -1, -1):
            thisdiff = penlist[i] - penlist[j]
            if thisdiff > diff:
                break
            if thisdiff in pents:
                if penlist[i] + penlist[j] in pents:
                    winners.append([penlist[i], penlist[j]])
    return winners


##def brute():
##    pents = set()
##    n = 1
##    while True:
##        newpen = get_pentag(n)
##        for item in pents:
##            if newpen - item in pents:
##                if is_pentag(newpen + item):
##                    #print("winnar! " + str(newpen) + ", " + str(item))
##                    return(str(newpen), str(item))
##        pents.add(newpen)
##        n += 1

print("Problem 44 solution: " + str(main()))
